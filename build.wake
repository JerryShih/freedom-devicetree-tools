def ./file = simplify "{here}/{file}"

def configure_file     = ./ "configure"
def configure_ac_file  = "{configure_file}.ac"
def makefile_file      = ./ "Makefile"
def makefile_in_file   = "{makefile_file}.in"
def makefile_am_file   = "{makefile_file}.am"
def git_version_script = ./ "scripts/git-version"
def m4_dir             = ./ "m4"

def doJob cmdline inputs =
  makePlan cmdline inputs
  | setPlanDirectory here
  | runJob
  | getJobOutputs

def makeTool tool =
  def autoreconfOutputs =
    def cmdline = which "autoreconf", "-i", Nil
    def inputs =  sources here '.*'
    doJob cmdline inputs

  # manual job because make modifies ".deps/*" outputs
  def configureOutputs =
    def cmdline = filter (configure_file ==~ _.getPathName) autoreconfOutputs | map getPathName
    def inputs = autoreconfOutputs ++ sources here '.*'
    def foutputs _ = ./"config.status", ./"config.log", ./"Makefile", Nil

    makeManualPlan cmdline inputs foutputs
    | setPlanDirectory here
    | runJob
    | getJobOutputs

  def makeOutputs =
    def cmdline = which "make", Nil
    def inputs = configureOutputs ++ autoreconfOutputs ++ sources here '.*'# ++ files (./".deps") '.*'
    doJob cmdline inputs

  makeOutputs | filter (./tool ==~ _.getPathName) | head

def freedom_ldscript_generator       _ = makeTool "freedom-ldscript-generator"
def freedom_makeattributes_generator _ = makeTool "freedom-makeattributes-generator"
def freedom_mee_header_generator     _ = makeTool "freedom-mee_header-generator"
def freedom_mee_specs_generator      _ = makeTool "freedom-mee_specs-generator"
def freedom_openocdcfg_generator     _ = makeTool "freedom-openocdcfg-generator"
def freedom_zephyrdtsfixup_generator _ = makeTool "freedom-zephyrdtsfixup-generator"


### Linker Script Generator ###
global data FreedomLdScriptGeneratorShow =
  FreedomLdScriptGeneratorShowMem
  FreedomLdScriptGeneratorShowControl
  FreedomLdScriptGeneratorShowBoth

tuple FreedomLdScriptGeneratorOptions =
  global DTBFile     Path
  global OutputFile  String
  global Scratchpad  Boolean
  global Show        Option FreedomLdScriptGeneratorShow

global def makeFreedomLdScriptGeneratorOptions dtbFile outputFile =
  FreedomLdScriptGeneratorOptions dtbFile outputFile False None

global def freedomLdScriptGenerator options =
  def tool = freedom_ldscript_generator 0
  def dtbFile = options.getFreedomLdScriptGeneratorOptionsDTBFile
  def cmdline =
    def base =
      tool.getPathName,
      "-d", dtbFile.getPathName,
      "-l", options.getFreedomLdScriptGeneratorOptionsOutputFile,
      Nil

    def scratchpad =
      if options.getFreedomLdScriptGeneratorOptionsScratchpad
      then "--scratchpad", Nil
      else Nil

    def show = match options.getFreedomLdScriptGeneratorOptionsShow
      None = Nil
      Some FreedomLdScriptGeneratorShowMem     = "-s", "mem", Nil
      Some FreedomLdScriptGeneratorShowControl = "-s", "control", Nil
      Some FreedomLdScriptGeneratorShowBoth    = "-s", "both", Nil

    base ++ scratchpad ++ show

  def inputs = tool, dtbFile, Nil
  makePlan cmdline inputs | runJob | getJobOutput


### Linker MEE header Generator ###
tuple FreedomMEEHeaderGeneratorOptions =
  global DTBFile    Path
  global OutputFile String

global def makeFreedomMEEHeaderGeneratorOptions dtbFile outputFile =
  FreedomMEEHeaderGeneratorOptions dtbFile outputFile

global def freedomMEEHeaderGenerator options =
  def tool = freedom_mee_header_generator 0
  def dtbFile = options.getFreedomMEEHeaderGeneratorOptionsDTBFile
  def cmdline =
    tool.getPathName,
    "-d", dtbFile.getPathName,
    "-o", options.getFreedomMEEHeaderGeneratorOptionsOutputFile,
    Nil
  def inputs = tool, dtbFile, Nil
  makePlan cmdline inputs | runJob | getJobOutput
